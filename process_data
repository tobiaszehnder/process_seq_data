#! /bin/bash

usage() {
cat << EOF
Usage: prun mdl ${0##*/} -d DATA_DIR -t DATA_TABLE [optional: -p NTHREADS -s STAR_PARAMS -o OVERWRITE -n -u -b -a]

Pipeline for processing sequencing data from ChIP-seq and chromatin accessibility assays from fastq to bigwig.

OPTIONS:
   -d PROJECT_DIR	Path to your project data folder.
      	  		The script will create links to the centrally stored data in that location.

   -t DATA_TABLE 	Path to your data table in comma-separated csv format
   	  	  	Download template here: https://bit.ly/38VOMrc
			Ideally store this file in the location you specified as -d DATA_DIR

   -p NTHREADS   	Number of parallel threads

   -n DRY_RUN		Flag for a dry run, i.e. only print the commands instead of executing.
 
   -o OVERWRITE		none|fastq|bam|bw. Lowest level of files to be overwritten. Default: none.

   -s STAR_PARAMS	Optional: any number of parameters for the STAR aligner (for ChIP-seq) in double quotes.
   	  		Example: -s "--outFilterMultimapNmax 1 --outSAMmultNmax 1"

   -u UNALIGNED		Flag for saving unaligned reads to PROJECT_DIR/bam/log/

   -b BETA		Use beta Snakefile (for testing purposes only)

   -a SNAKEMAKE_ARGS    Optional arguments for Snakemake in quotes, i.e. -s "--debug-dag --unlock -p"
EOF
}

# parse arguments (more info at https://ndench.github.io/bash/parsing-bash-flags)
dry_run_flag=""
nthreads="--cores 1"
overwrite="none"
write_unaligned=False
snakemake_args="-pk --rerun-incomplete" # default: verbose, keep going (don't abort when one job fails) and rerun incomplete previous jobs
local=False # Flag for saving files locally on the user's project folder instead of centrally. This option will not be advertised.
snakefile="/project/process_seq_data/bin/process_seq_data/Snakefile_release"
while getopts ":d:t:p:s:o:a:nub" OPTION; do
	case $OPTION in
		d) project_dir=$(realpath $OPTARG) ;; # full path
		t) data_table=$(realpath $OPTARG) ;;
		p) nthreads="--cores $OPTARG" ;;
		n) nthreads="-nr" ;;
		o) overwrite=$OPTARG ;;
		l) local=True ;;
		s) star_params="star_params='$OPTARG'" ;;
		u) write_unaligned=True ;;
		b) snakefile="/project/process_seq_data/bin/process_seq_data/Snakefile" ;;
		a) snakemake_args="$snakemake_args $OPTARG" ;;
		?) usage; exit 1 ;;
 	esac
done

# throw error if not all mandatory arguments are passed
if [ -z ${project_dir+x} ] || [ -z ${data_table+x} ]; then
	usage
	exit 1
fi

# determine which files to force run (overwrite)
# the fastq rules are the lowest level rules for all three sources (mpi, geo, encode). all rules depending on those rules will be executed too.
declare -A arr=( ["none"]=""
				 ["fastq"]="--forcerun merge_mpi_fastqs download_geo download_encode_single_end download_encode_paired_end"
				 ["bam"]="--forcerun align"
				 ["bw"]="--forcerun bw" )
force_run=${arr[$overwrite]}

cmd="""
snakemake \
	--snakefile $snakefile \
	--config \
	project_dir=$project_dir \
	data_table=$data_table \
	write_unaligned=$write_unaligned \
	$star_params \
	local=$local \
	$force_run \
	$snakemake_args \
	$nthreads
"""

# print command during dry run
if [[ $nthreads == '-nr' ]]; then
	echo $cmd
fi

# run snakefile
eval $cmd
